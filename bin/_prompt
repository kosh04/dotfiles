#!/bin/bash
# Usage: source ~/path/to/_prompt

_ps1()
{
local bold="\[\e[1m\]"          # $(tput bold)
local red="\[\e[31m\]"          # $(tput setaf 1)
local green="\[\e[32m\]"        # $(tput setaf 2)
local blue="\[\e[34m\]"         # $(tput setaf 4)
local reset="\[\e[0m\]"         # $(tput sgr0)

if [ -z "$INSIDE_EMACS" ]; then
    printf '\[$(_ps1_rightprompt)\]'
fi

if command -v __git_ps1 >/dev/null; then
echo "[${bold}${red}\u${green}@${blue}\h${reset} \W]\$(__git_ps1)\\n\\$ "
else
echo "[${bold}${red}\u${green}@${blue}\h${reset} \W]\\$ "
fi
}

# TODO: How to write right prompt in bash "\\D{%F %T}"
_ps1_rightprompt() {
	local sc="\x1b7" # tput sc (Save cursor)
	local rc="\x1b8" # tput rc (Restore cursor)
#	local date="$(date '+%FT%T')"
	local date="$(date '+%H:%M')"
	printf "${sc}%*s${rc}" "$COLUMNS" "[$date]"
}

PS1=$(_ps1)

# ターミナルのタイトルの動的変更
# See also: /etc/bash.bashrc
_set_terminal_title()
{
    local title="${1:-${USER}@${HOSTNAME}: ${PWD/#$HOME/'~'}}"
    echo -ne "\e]0;${title}\a"
}

case "$TERM" in
xterm*|rxvt*|screen*)
    PROMPT_COMMAND='_set_terminal_title'
    ;;
esac

# ホームディレクトリ限定で git コマンドを bin/dotfiles と同様に振る舞わせたい
# __git_ps1 がある環境であればプロンプト PS1 からも利用可能になる
# WARNING: 内部で git を呼び出すコマンドに影響を及ぼす可能性あり (`go get` など)
_dotfiles_ready()
{
    if [[ "$PWD" == "$HOME" ]]; then
        export GIT_DIR="$HOME/.dotfiles.git"
        export GIT_WORK_TREE="$HOME"
    else
        unset GIT_DIR
        unset GIT_WORK_TREE
    fi
}
#PROMPT_COMMAND="_dotfiles_ready;${PROMPT_COMMAND}"

# エラーコードの表示 (optional)
_exit_status() {
    local _status=$?	  # NOTE: $status is read-only variable in zsh
    local red="\e[31m"
    local green="\e[32m"
    local reset="\e[0m"

    if [[ $_status == 0 ]]; then
        echo -e "${green}(*'-')${reset}"
    else
        echo -e "${red}(*;-;) #${_status} at $(date '+%FT%T'%z)${reset}"
    fi
}
trap _exit_status ERR
